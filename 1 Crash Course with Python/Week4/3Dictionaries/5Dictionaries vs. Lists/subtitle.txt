Dictionaries and
lists are both really useful and each have strengths
in different situations. So when is it best to use a list and when is the
dictionary the way to go? Think about the kind
of information you can represent in each data structure. If you've got a list of information you'd
like to collect and use in your script then the list is probably
the right approach. For example, if you want to store a series of IP addresses to ping, you could put them all into a
list and iterate over them. Or if you had a list of host names and their
corresponding IP addresses, you might want to pair them as key values in a dictionary. Because of the way
dictionaries work, it's super easy and fast to search for
an element in them. Let's say you have
a dictionary that has usernames as keys, and the groups they
belong to as values. It doesn't matter if you have
10 users or 10,000 users, accessing the entry for a given user will
take the same time. Amazing, but this
isn't true for lists. If you've got a list
of 10 elements, and you need to check if
one element is in the list, it'll be a very fast check
but if your list has 10,000 elements it'll take
significantly longer to check if the element
you're looking for is there. So in general, you want to use dictionaries when you plan on searching for a specific element. Another interesting
difference is the types of values that we can store
in lists and dictionaries. In lists, you can
store any data type. In dictionaries, we can
store any data type for the values but the keys are
restricted to specific types. The reasoning behind which
types are allowed can get complex and we don't
want to bog you down with unnecessary details. So as a rule of thumb, you can use any
immutable data type; numbers, booleans, strings and
tuples as dictionary keys. But you can't use lists
or dictionaries for that. On the flip side, like we said, the values associated with
keys can be any type, including lists or even
other dictionaries. You can use them to represent more complex data structures like directory trees
in the file system. There's a ton of
different key value pairs that we need to work
with in system administration. So I use dictionaries
all the time. They're especially useful
with large data sets. When I need to write a script
that gets specific keys out of it to manipulate or
modify the associated value. But it doesn't always
need to be that serious. One-time, just for fun, I wanted to be able to look up which Disney villain is
associated with each protagonist. So I created a dictionary that stores a key like Snow White, with the value, evil
queen. Pretty good. Mirror, mirror on my screen who's the best coder
you've ever seen? There are even more data types available that we
haven't checked out yet. One of these data types
is a set which is a bit like a cross between
a list and a dictionary. A set is used when you
want to store a bunch of elements and be certain that
there are only present once. Elements of a set must
also be immutable. You can think of this as the
keys of a dictionary with no associated values
or you could see it as a list where what matters
isn't the order of the elements but whether an element is in the list or not. Wow, we've covered a lot
and we've still only scratched the surface of what dictionaries can do
in your scripts. As you progress in
your IT career, you'll come across a
lot of situations where dictionary is the easiest
way to organize your data. If you're interested,
you can learn more about dictionaries in the
official documentation. You'll find links to this
in the next reading.